generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String     @id @default(uuid())
  email     String?    @unique
  password  String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  role      String     @default("public")
  firstName String?
  lastName  String?
  Talk      Talk[]
  Favorite  Favorite[]
  Slot      Slot[]
}

model Favorite {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  talk      Talk     @relation(fields: [talkId], references: [id], onDelete: Cascade)
  talkId    Int
}

model Room {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Talk      Talk[]
  Slot      Slot[]
}

model Talk {
  id          Int        @id @default(autoincrement())
  title       String
  subject     String @default("")
  description String?
  duration    Int    @default(0)
  status      String     @default("pending")
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  room        Room       @relation(fields: [roomId], references: [id], onDelete: Cascade)
  roomId      Int
  user        User       @relation(references: [id], fields: [userId], onDelete: Cascade)
  userId      String
  Favorite    Favorite[]
  Slot        Slot[]
}

model Slot {
  id         Int      @id @default(autoincrement())
  date       DateTime
  room       Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)
  roomId     Int
  reservedBy User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  talk       Talk?    @relation(fields: [talkId], references: [id], onDelete: Cascade)
  talkId     Int?
  createdAt  DateTime @default(now())
}
