generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String     @id @default(uuid())
  email     String?    @unique
  password  String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  role      String     @default("public")
  firstName String?
  lastName  String?
  Task      Task[]
  Favorite  Favorite[]
  Slot      Slot[]
}

model Favorite {
  id        String   @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  Talk      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId    String
}

model Room {
  id        String   @id
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime
  Task      Task[]
  Slot      Slot[]
}

model Task {
  id          String   @id
  title       String
  description String?
  status      String   @default("pending")
  createdAt   DateTime @default(now())
  updatedAt   DateTime

  Room     Room?      @relation(fields: [Roomid], references: [id], onDelete: Cascade)
  Roomid   String?
  User     User?      @relation(references: [id], fields: [userId], onDelete: Cascade)
  userId   String?
  Favorite Favorite[]
}

model Slot {
  id         Int      @id @default(autoincrement())
  duration   Int
  date       DateTime
  room       Room?    @relation(fields: [roomId], references: [id], onDelete: Cascade)
  roomId     String?
  reservedBy User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String?
  createdAt  DateTime @default(now())
}
